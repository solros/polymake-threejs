<!--
polymake for silke
Wed Dec 17 16:20:26 2014
GRAPH of 
-->


<html>
	<head>
		<title>GRAPH of </title>
		<style>canvas { width: 100%; height: 100% }</style>
	</head>

<body>

<div id="model"></div>

<script src="js/three_for_polymake.min.js"></script>


<script>
	var container = document.getElementById( 'model' );
	var renderer = Detector.webgl? new THREE.WebGLRenderer({antialias: true}): new THREE.CanvasRenderer({antialias: true});

	renderer.setSize(window.innerWidth, window.innerHeight);
	renderer.setClearColor(0xFFFFFF, 1);

	container.appendChild(renderer.domElement);


	var scene = new THREE.Scene();
	var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
					
	camera.position.set(0, 0, 5);
	camera.lookAt(0, 0, 0);
	camera.up.set(0, 1, 0);

	var controls = new THREE.TrackballControls(camera, container);
	
	var all_objects = [];
	var centroids = [];
	var obj = new THREE.Object3D();
	
	<!-- Vertex style -->
	var materials = [
		new THREE.MeshBasicMaterial({ color: 0x0000FF, }),
		new THREE.MeshBasicMaterial({ color: 0x000000, }),
		new THREE.MeshBasicMaterial({ color: 0xFFFFFF, }),
		new THREE.MeshBasicMaterial({ color: 0x0000FF, }),
		new THREE.MeshBasicMaterial({ color: 0x000000, }),
		new THREE.MeshBasicMaterial({ color: 0xFFFFFF, }),
		new THREE.MeshBasicMaterial({ color: 0x0000FF, }),
		new THREE.MeshBasicMaterial({ color: 0x000000, }),
	];
	var points_material = new THREE.MeshFaceMaterial ( materials );
	points_material.side = THREE.DoubleSide;
	

	<!-- POINTS -->
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.02), materials[0]);
	sphere.position.set(-0.960877, 0.00509739, -1.91309);
	obj.add(sphere);
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.02), materials[1]);
	sphere.position.set(-2.02553, -0.658181, 0.217369);
	obj.add(sphere);
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.02), materials[2]);
	sphere.position.set(0.023458, 1.98349, -0.805246);
	obj.add(sphere);
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.02), materials[3]);
	sphere.position.set(-1.04119, 1.32021, 1.32522);
	obj.add(sphere);
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.02), materials[4]);
	sphere.position.set(1.04119, -1.32021, -1.32521);
	obj.add(sphere);
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.02), materials[5]);
	sphere.position.set(-0.023465, -1.9835, 0.805242);
	obj.add(sphere);
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.02), materials[6]);
	sphere.position.set(2.02553, 0.658188, -0.217368);
	obj.add(sphere);
	var sphere = new THREE.Mesh(new THREE.SphereGeometry(0.02), materials[7]);
	sphere.position.set(0.96088, -0.00510505, 1.91309);
	obj.add(sphere);
	makelabel("0", -0.960877, 0.00509739, -1.91309);
	makelabel("1", -2.02553, -0.658181, 0.217369);
	makelabel("2", 0.023458, 1.98349, -0.805246);
	makelabel("3", -1.04119, 1.32021, 1.32522);
	makelabel("4", 1.04119, -1.32021, -1.32521);
	makelabel("5", -0.023465, -1.9835, 0.805242);
	makelabel("6", 2.02553, 0.658188, -0.217368);
	makelabel("7", 0.96088, -0.00510505, 1.91309);

	<!-- Edge style -->
	var line_material = new THREE.LineBasicMaterial ( {color: 0x000000, linewidth: 1, } );
	line_material.side = THREE.DoubleSide;
	

	<!-- EDGES -->
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(-2.02553, -0.658181, 0.217369));
	line.vertices.push(new THREE.Vector3(-0.960877, 0.00509739, -1.91309));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(0.023458, 1.98349, -0.805246));
	line.vertices.push(new THREE.Vector3(-0.960877, 0.00509739, -1.91309));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(-1.04119, 1.32021, 1.32522));
	line.vertices.push(new THREE.Vector3(-2.02553, -0.658181, 0.217369));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(-1.04119, 1.32021, 1.32522));
	line.vertices.push(new THREE.Vector3(0.023458, 1.98349, -0.805246));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(1.04119, -1.32021, -1.32521));
	line.vertices.push(new THREE.Vector3(-0.960877, 0.00509739, -1.91309));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(-0.023465, -1.9835, 0.805242));
	line.vertices.push(new THREE.Vector3(-2.02553, -0.658181, 0.217369));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(-0.023465, -1.9835, 0.805242));
	line.vertices.push(new THREE.Vector3(1.04119, -1.32021, -1.32521));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(2.02553, 0.658188, -0.217368));
	line.vertices.push(new THREE.Vector3(0.023458, 1.98349, -0.805246));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(2.02553, 0.658188, -0.217368));
	line.vertices.push(new THREE.Vector3(1.04119, -1.32021, -1.32521));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(0.96088, -0.00510505, 1.91309));
	line.vertices.push(new THREE.Vector3(-1.04119, 1.32021, 1.32522));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(0.96088, -0.00510505, 1.91309));
	line.vertices.push(new THREE.Vector3(-0.023465, -1.9835, 0.805242));
	obj.add(new THREE.Line(line, line_material));
	
	var line = new THREE.Geometry();
	line.vertices.push(new THREE.Vector3(0.96088, -0.00510505, 1.91309));
	line.vertices.push(new THREE.Vector3(2.02553, 0.658188, -0.217368));
	obj.add(new THREE.Line(line, line_material));
	
	scene.add(obj);
	all_objects.push(obj);


	var render = function () {

		requestAnimationFrame(render);

//		comment in for automatic explosion
//		explode(updateFactor());

		controls.update();
		renderer.render(scene, camera);
	};

	render();

	function computeCentroid(geom) {
		centroid = new THREE.Vector3();
		geom.vertices.forEach(function(v) {
			centroid.add(v);			
		});
		centroid.divideScalar(geom.vertices.length);
		return centroid;
	}

	function explode(factor) {
		var obj, c;
		for (var i = 0; i< all_objects.length; ++i) {
			obj = all_objects[i];
			c = centroids[i];
	
			obj.position.set(c.x*factor, c.y*factor, c.z*factor);
		}	
	}

	var pos = 150* Math.PI;

	function updateFactor() {
		pos++;
		return Math.sin(.01*pos)+1;
	}

	function makelabel(message, x, y, z, params) {
		var spritey = textSprite( message, params );
		spritey.position.set(x, y, z);
		obj.add(spritey);
	}

	function textSprite(message, parameters)
	{
		if ( parameters === undefined ) parameters = {};

		var fontface = "Helvetica";

		var fontsize = parameters.hasOwnProperty("fontsize") ? 
			parameters["fontsize"] : 18;
		fontsize = fontsize*10;

		var canvas = document.createElement('canvas');
		var size = 1000;
		canvas.width = size;
		canvas.height = size;
		var context = canvas.getContext('2d');
		context.font = fontsize + "px " + fontface;

		// text color
		context.fillStyle = "rgba(0, 0, 0, 1.0)";

		context.fillText(message, size/2, size/2);

		// canvas contents will be used for a texture
		var texture = new THREE.Texture(canvas);
		texture.needsUpdate = true;

		var spriteMaterial = new THREE.SpriteMaterial(
			{map: texture, useScreenCoordinates: false});
		var sprite = new THREE.Sprite(spriteMaterial);
		return sprite;
	}



</script>

</body>
</html>
